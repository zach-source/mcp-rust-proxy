name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: mcp-rust-proxy
            archive_name: mcp-rust-proxy-x86_64-linux.tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: mcp-rust-proxy
            archive_name: mcp-rust-proxy-aarch64-linux.tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: mcp-rust-proxy
            archive_name: mcp-rust-proxy-x86_64-macos.tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: mcp-rust-proxy
            archive_name: mcp-rust-proxy-aarch64-macos.tar.gz

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install trunk for Yew UI
        run: cargo install trunk --locked

      - name: Install wasm-bindgen-cli
        run: cargo install wasm-bindgen-cli --locked

      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Build with UI
        env:
          BUILD_YEW_UI: 1
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cargo build --release --target ${{ matrix.target }} --features vendored-openssl
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Create archive
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/
          cp README.md LICENSE dist/ 2>/dev/null || true
          cd dist
          tar czf ../${{ matrix.archive_name }} *

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}