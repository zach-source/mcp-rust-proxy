name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14
      
      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: mcp-rust-proxy
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      
      - name: Run tests
        run: |
          nix develop --command cargo test --all-features
      
      - name: Run clippy
        run: |
          nix develop --command cargo clippy --all-features -- -D warnings
      
      - name: Check formatting
        run: |
          nix develop --command cargo fmt -- --check

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-linux
          - os: ubuntu-latest
            target: aarch64-linux
          - os: macos-latest
            target: x86_64-darwin
          - os: macos-latest
            target: aarch64-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: mcp-rust-proxy
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build package for ${{ matrix.target }}
        run: |
          nix build .#${{ matrix.target }} -L

      - name: Test binary
        if: matrix.target == 'x86_64-linux' || matrix.target == 'aarch64-darwin'
        run: |
          if [[ -f result/bin/mcp-rust-proxy ]]; then
            ./result/bin/mcp-rust-proxy --help || echo "Binary exists but may not run on this architecture"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcp-rust-proxy-${{ matrix.target }}
          path: result/bin/mcp-rust-proxy
          if-no-files-found: warn

  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14
      
      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8
      
      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: mcp-rust-proxy
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      
      - name: Build Docker image
        run: |
          nix build .#docker -L
          docker load < result
      
      - name: Test Docker image
        run: |
          docker run --rm mcp-rust-proxy:latest --version

  check-flake:
    name: Check Nix flake
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14
      
      - name: Check flake
        run: |
          nix flake check -L
      
      - name: Check flake formatting
        run: |
          # Install nixpkgs-fmt if available
          if command -v nixpkgs-fmt &> /dev/null; then
            nixpkgs-fmt --check flake.nix
          else
            echo "nixpkgs-fmt not available, skipping format check"
          fi